{"ast":null,"code":"import validator from 'validator';\nclass FormValidator {\n  constructor(validations) {\n    this.validations = validations;\n  }\n  validate(state) {\n    let validation = this.valid();\n    // for each validation rule\n    this.validations.forEach(rule => {\n      if (!validation[rule.field].isInvalid) {\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method;\n        if (validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = {\n            isInvalid: true,\n            message: rule.message\n          };\n          validation.isValid = false;\n        }\n      }\n    });\n    return validation;\n  }\n  valid() {\n    const validation = {};\n    this.validations.map(rule => validation[rule.field] = {\n      isInvalid: false,\n      message: ''\n    });\n    return {\n      isValid: true,\n      ...validation\n    };\n  }\n}\nexport default FormValidator;","map":{"version":3,"names":["validator","FormValidator","constructor","validations","validate","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validWhen","message","isValid","map"],"sources":["C:/React/employee/src/FormValidator.js"],"sourcesContent":["import validator from 'validator';\r\nclass FormValidator {\r\n    constructor(validations) {\r\n        this.validations = validations;\r\n    }\r\n    validate(state) {\r\n        let validation = this.valid();\r\n        // for each validation rule\r\n        this.validations.forEach(rule => {\r\n            if(!validation[rule.field].isInvalid) {\r\n                const field_value = state[rule.field].toString();\r\n                const args = rule.args || [];\r\n                const validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method\r\n                if(validation_method(field_value, ...args, state) !== rule.validWhen) {\r\n                    validation[rule.field] = {\r\n                        isInvalid: true,\r\n                        message: rule.message\r\n                    }\r\n                    validation.isValid = false;\r\n                }\r\n            }\r\n        });\r\n        return validation;\r\n    }\r\n    valid() {\r\n        const validation = {}\r\n        this.validations.map(rule => (validation[rule.field] = {\r\n            isInvalid: false,\r\n            message: ''\r\n        }));\r\n        return {\r\n            isValid: true,\r\n            ...validation\r\n        };\r\n    }\r\n}\r\nexport default FormValidator;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,MAAMC,aAAa,CAAC;EAChBC,WAAWA,CAACC,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;EACAC,QAAQA,CAACC,KAAK,EAAE;IACZ,IAAIC,UAAU,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC;IAC7B;IACA,IAAI,CAACJ,WAAW,CAACK,OAAO,CAACC,IAAI,IAAI;MAC7B,IAAG,CAACH,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,CAACC,SAAS,EAAE;QAClC,MAAMC,WAAW,GAAGP,KAAK,CAACI,IAAI,CAACC,KAAK,CAAC,CAACG,QAAQ,CAAC,CAAC;QAChD,MAAMC,IAAI,GAAGL,IAAI,CAACK,IAAI,IAAI,EAAE;QAC5B,MAAMC,iBAAiB,GAAG,OAAON,IAAI,CAACO,MAAM,KAAK,QAAQ,GAAGhB,SAAS,CAACS,IAAI,CAACO,MAAM,CAAC,GAAGP,IAAI,CAACO,MAAM;QAChG,IAAGD,iBAAiB,CAACH,WAAW,EAAE,GAAGE,IAAI,EAAET,KAAK,CAAC,KAAKI,IAAI,CAACQ,SAAS,EAAE;UAClEX,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG;YACrBC,SAAS,EAAE,IAAI;YACfO,OAAO,EAAET,IAAI,CAACS;UAClB,CAAC;UACDZ,UAAU,CAACa,OAAO,GAAG,KAAK;QAC9B;MACJ;IACJ,CAAC,CAAC;IACF,OAAOb,UAAU;EACrB;EACAC,KAAKA,CAAA,EAAG;IACJ,MAAMD,UAAU,GAAG,CAAC,CAAC;IACrB,IAAI,CAACH,WAAW,CAACiB,GAAG,CAACX,IAAI,IAAKH,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG;MACnDC,SAAS,EAAE,KAAK;MAChBO,OAAO,EAAE;IACb,CAAE,CAAC;IACH,OAAO;MACHC,OAAO,EAAE,IAAI;MACb,GAAGb;IACP,CAAC;EACL;AACJ;AACA,eAAeL,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}
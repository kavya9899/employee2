{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createSubscribe } from '@firebase/util';\nimport { patchProperty, deepCopy, deepExtend, ErrorFactory } from '@firebase/util';\nvar contains = function (obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n// An array to capture listeners before the true auth functions\n// exist\nvar tokenListeners = [];\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n */\nvar FirebaseAppImpl = /** @class */function () {\n  function FirebaseAppImpl(options, name, firebase_) {\n    this.firebase_ = firebase_;\n    this.isDeleted_ = false;\n    this.services_ = {};\n    this.name_ = name;\n    this.options_ = deepCopy(options);\n    this.INTERNAL = {\n      getUid: function () {\n        return null;\n      },\n      getToken: function () {\n        return Promise.resolve(null);\n      },\n      addAuthTokenListener: function (callback) {\n        tokenListeners.push(callback);\n        // Make sure callback is called, asynchronously, in the absence of the auth module\n        setTimeout(function () {\n          return callback(null);\n        }, 0);\n      },\n      removeAuthTokenListener: function (callback) {\n        tokenListeners = tokenListeners.filter(function (listener) {\n          return listener !== callback;\n        });\n      }\n    };\n  }\n  Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\n    get: function () {\n      this.checkDestroyed_();\n      return this.name_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\n    get: function () {\n      this.checkDestroyed_();\n      return this.options_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  FirebaseAppImpl.prototype.delete = function () {\n    var _this = this;\n    return new Promise(function (resolve) {\n      _this.checkDestroyed_();\n      resolve();\n    }).then(function () {\n      _this.firebase_.INTERNAL.removeApp(_this.name_);\n      var services = [];\n      Object.keys(_this.services_).forEach(function (serviceKey) {\n        Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\n          services.push(_this.services_[serviceKey][instanceKey]);\n        });\n      });\n      return Promise.all(services.map(function (service) {\n        return service.INTERNAL.delete();\n      }));\n    }).then(function () {\n      _this.isDeleted_ = true;\n      _this.services_ = {};\n    });\n  };\n  /**\n   * Return a service instance associated with this app (creating it\n   * on demand), identified by the passed instanceIdentifier.\n   *\n   * NOTE: Currently storage is the only one that is leveraging this\n   * functionality. They invoke it by calling:\n   *\n   * ```javascript\n   * firebase.app().storage('STORAGE BUCKET ID')\n   * ```\n   *\n   * The service name is passed to this already\n   * @internal\n   */\n  FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\n    if (instanceIdentifier === void 0) {\n      instanceIdentifier = DEFAULT_ENTRY_NAME;\n    }\n    this.checkDestroyed_();\n    if (!this.services_[name]) {\n      this.services_[name] = {};\n    }\n    if (!this.services_[name][instanceIdentifier]) {\n      /**\n       * If a custom instance has been defined (i.e. not '[DEFAULT]')\n       * then we will pass that instance on, otherwise we pass `null`\n       */\n      var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME ? instanceIdentifier : undefined;\n      var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\n      this.services_[name][instanceIdentifier] = service;\n    }\n    return this.services_[name][instanceIdentifier];\n  };\n  /**\n   * Callback function used to extend an App instance at the time\n   * of service instance creation.\n   */\n  FirebaseAppImpl.prototype.extendApp = function (props) {\n    var _this = this;\n    // Copy the object onto the FirebaseAppImpl prototype\n    deepExtend(this, props);\n    /**\n     * If the app has overwritten the addAuthTokenListener stub, forward\n     * the active token listeners on to the true fxn.\n     *\n     * TODO: This function is required due to our current module\n     * structure. Once we are able to rely strictly upon a single module\n     * implementation, this code should be refactored and Auth should\n     * provide these stubs and the upgrade logic\n     */\n    if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\n      tokenListeners.forEach(function (listener) {\n        _this.INTERNAL.addAuthTokenListener(listener);\n      });\n      tokenListeners = [];\n    }\n  };\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  FirebaseAppImpl.prototype.checkDestroyed_ = function () {\n    if (this.isDeleted_) {\n      error('app-deleted', {\n        name: this.name_\n      });\n    }\n  };\n  return FirebaseAppImpl;\n}();\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\nFirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log('dc');\n/**\n * Return a firebase namespace object.\n *\n * In production, this will be called exactly once and the result\n * assigned to the 'firebase' global.  It may be called multiple times\n * in unit tests.\n */\nexport function createFirebaseNamespace() {\n  var apps_ = {};\n  var factories = {};\n  var appHooks = {};\n  // A namespace is a plain JavaScript Object.\n  var namespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    __esModule: true,\n    initializeApp: initializeApp,\n    app: app,\n    apps: null,\n    Promise: Promise,\n    SDK_VERSION: '4.8.0',\n    INTERNAL: {\n      registerService: registerService,\n      createFirebaseNamespace: createFirebaseNamespace,\n      extendNamespace: extendNamespace,\n      createSubscribe: createSubscribe,\n      ErrorFactory: ErrorFactory,\n      removeApp: removeApp,\n      factories: factories,\n      useAsService: useAsService,\n      Promise: Promise,\n      deepExtend: deepExtend\n    }\n  };\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  patchProperty(namespace, 'default', namespace);\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name) {\n    var app = apps_[name];\n    callAppHooks(app, 'delete');\n    delete apps_[name];\n  }\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name) {\n    name = name || DEFAULT_ENTRY_NAME;\n    if (!contains(apps_, name)) {\n      error('no-app', {\n        name: name\n      });\n    }\n    return apps_[name];\n  }\n  patchProperty(app, 'App', FirebaseAppImpl);\n  /**\n   * Create a new App instance (name must be unique).\n   */\n  function initializeApp(options, name) {\n    if (name === undefined) {\n      name = DEFAULT_ENTRY_NAME;\n    } else {\n      if (typeof name !== 'string' || name === '') {\n        error('bad-app-name', {\n          name: name + ''\n        });\n      }\n    }\n    if (contains(apps_, name)) {\n      error('duplicate-app', {\n        name: name\n      });\n    }\n    var app = new FirebaseAppImpl(options, name, namespace);\n    apps_[name] = app;\n    callAppHooks(app, 'create');\n    return app;\n  }\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps() {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps_).map(function (name) {\n      return apps_[name];\n    });\n  }\n  /*\n   * Register a Firebase Service.\n   *\n   * firebase.INTERNAL.registerService()\n   *\n   * TODO: Implement serviceProperties.\n   */\n  function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\n    // Cannot re-register a service that already exists\n    if (factories[name]) {\n      error('duplicate-service', {\n        name: name\n      });\n    }\n    // Capture the service factory for later service instantiation\n    factories[name] = createService;\n    // Capture the appHook, if passed\n    if (appHook) {\n      appHooks[name] = appHook;\n      // Run the **new** app hook on all existing apps\n      getApps().forEach(function (app) {\n        appHook('create', app);\n      });\n    }\n    // The Service namespace is an accessor function ...\n    var serviceNamespace = function (appArg) {\n      if (appArg === void 0) {\n        appArg = app();\n      }\n      if (typeof appArg[name] !== 'function') {\n        // Invalid argument.\n        // This happens in the following case: firebase.storage('gs:/')\n        error('invalid-app-argument', {\n          name: name\n        });\n      }\n      // Forward service instance lookup to the FirebaseApp.\n      return appArg[name]();\n    };\n    // ... and a container for service-level properties.\n    if (serviceProperties !== undefined) {\n      deepExtend(serviceNamespace, serviceProperties);\n    }\n    // Monkey-patch the serviceNamespace onto the firebase namespace\n    namespace[name] = serviceNamespace;\n    // Patch the FirebaseAppImpl prototype\n    FirebaseAppImpl.prototype[name] = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var serviceFxn = this._getService.bind(this, name);\n      return serviceFxn.apply(this, allowMultipleInstances ? args : []);\n    };\n    return serviceNamespace;\n  }\n  /**\n   * Patch the top-level firebase namespace with additional properties.\n   *\n   * firebase.INTERNAL.extendNamespace()\n   */\n  function extendNamespace(props) {\n    deepExtend(namespace, props);\n  }\n  function callAppHooks(app, eventName) {\n    Object.keys(factories).forEach(function (serviceName) {\n      // Ignore virtual services\n      var factoryName = useAsService(app, serviceName);\n      if (factoryName === null) {\n        return;\n      }\n      if (appHooks[factoryName]) {\n        appHooks[factoryName](eventName, app);\n      }\n    });\n  }\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app, name) {\n    if (name === 'serverAuth') {\n      return null;\n    }\n    var useService = name;\n    var options = app.options;\n    return useService;\n  }\n  return namespace;\n}\nfunction error(code, args) {\n  throw appErrors.create(code, args);\n}\n// TypeScript does not support non-string indexes!\n// let errors: {[code: AppError: string} = {\nvar errors = {\n  'no-app': \"No Firebase App '{$name}' has been created - \" + 'call Firebase App.initializeApp()',\n  'bad-app-name': \"Illegal App name: '{$name}\",\n  'duplicate-app': \"Firebase App named '{$name}' already exists\",\n  'app-deleted': \"Firebase App named '{$name}' already deleted\",\n  'duplicate-service': \"Firebase service named '{$name}' already registered\",\n  'sa-not-supported': 'Initializing the Firebase SDK with a service ' + 'account is only allowed in a Node.js environment. On client ' + 'devices, you should instead initialize the SDK with an api key and ' + 'auth domain',\n  'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' + 'Firebase App instance.'\n};\nvar appErrors = new ErrorFactory('app', 'Firebase', errors);","map":{"version":3,"names":["createSubscribe","patchProperty","deepCopy","deepExtend","ErrorFactory","contains","obj","key","Object","prototype","hasOwnProperty","call","DEFAULT_ENTRY_NAME","tokenListeners","FirebaseAppImpl","options","name","firebase_","isDeleted_","services_","name_","options_","INTERNAL","getUid","getToken","Promise","resolve","addAuthTokenListener","callback","push","setTimeout","removeAuthTokenListener","filter","listener","defineProperty","get","checkDestroyed_","delete","_this","then","removeApp","services","keys","forEach","serviceKey","instanceKey","all","map","service","_getService","instanceIdentifier","instanceSpecifier","undefined","factories","extendApp","bind","props","error","console","log","createFirebaseNamespace","apps_","appHooks","namespace","__esModule","initializeApp","app","apps","SDK_VERSION","registerService","extendNamespace","useAsService","getApps","callAppHooks","createService","serviceProperties","appHook","allowMultipleInstances","serviceNamespace","appArg","args","_i","arguments","length","serviceFxn","apply","eventName","serviceName","factoryName","useService","code","appErrors","create","errors"],"sources":["C:\\React\\employee\\node_modules\\@firebase\\app\\dist\\esm\\src\\dist\\esm\\src\\firebaseApp.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createSubscribe, Observer, Subscribe } from '@firebase/util';\nimport {\n  patchProperty,\n  deepCopy,\n  deepExtend,\n  ErrorFactory,\n  FirebaseError\n} from '@firebase/util';\n\nexport interface FirebaseAuthTokenData {\n  accessToken: string;\n}\n\nexport interface FirebaseAppInternals {\n  getToken(refreshToken?: boolean): Promise<FirebaseAuthTokenData | null>;\n  getUid(): string | null;\n  addAuthTokenListener(fn: (token: string | null) => void): void;\n  removeAuthTokenListener(fn: (token: string | null) => void): void;\n}\n\nexport type FirebaseOptions = {\n  apiKey?: string;\n  authDomain?: string;\n  databaseURL?: string;\n  projectId?: string;\n  storageBucket?: string;\n  messagingSenderId?: string;\n  [name: string]: any;\n};\n\n// An instance of the firebase.App\nexport interface FirebaseApp {\n  /**\n   * The (read-only) name (identifier) for this App. '[DEFAULT]' is the default\n   * App.\n   */\n  name: string;\n\n  /**\n   * The (read-only) configuration options from the app initialization.\n   */\n  options: FirebaseOptions;\n\n  /**\n   * Make the given App unusable and free resources.\n   */\n  delete(): Promise<void>;\n\n  INTERNAL: FirebaseAppInternals;\n}\n\nexport interface FirebaseServiceInternals {\n  /**\n   * Delete the service and free it's resources - called from\n   * app.delete().\n   */\n  delete(): Promise<void>;\n}\n\n// Services are exposed through instances - each of which is associated with a\n// FirebaseApp.\nexport interface FirebaseService {\n  app: FirebaseApp;\n  INTERNAL?: FirebaseServiceInternals;\n}\n\nexport type AppHook = (event: string, app: FirebaseApp) => void;\n\n/**\n * Firebase Services create instances given a Firebase App instance and can\n * optionally add properties and methods to each FirebaseApp via the extendApp()\n * function.\n */\nexport interface FirebaseServiceFactory {\n  (\n    app: FirebaseApp,\n    extendApp?: (props: { [prop: string]: any }) => void,\n    instanceString?: string\n  ): FirebaseService;\n}\n\n/**\n * All ServiceNamespaces extend from FirebaseServiceNamespace\n */\nexport interface FirebaseServiceNamespace<T extends FirebaseService> {\n  (app?: FirebaseApp): T;\n}\n\nexport interface FirebaseErrorFactory<T> {\n  create(code: T, data?: { [prop: string]: any }): FirebaseError;\n}\n\nexport interface FirebaseErrorFactoryClass {\n  new (\n    service: string,\n    serviceName: string,\n    errors: { [code: string]: string }\n  ): FirebaseErrorFactory<any>;\n}\n\nexport interface FirebaseNamespace {\n  /**\n   * Create (and intialize) a FirebaseApp.\n   *\n   * @param options Options to configure the services use in the App.\n   * @param name The optional name of the app to initialize ('[DEFAULT]' if\n   *   none)\n   */\n  initializeApp(options: FirebaseOptions, name?: string): FirebaseApp;\n\n  app: {\n    /**\n     * Retrieve an instance of a FirebaseApp.\n     *\n     * Usage: firebase.app()\n     *\n     * @param name The optional name of the app to return ('[DEFAULT]' if none)\n     */\n    (name?: string): FirebaseApp;\n\n    /**\n     * For testing FirebaseApp instances:\n     *   app() instanceof firebase.app.App\n     * DO NOT call this constuctor directly (use firebase.app() instead).\n     */\n    App: Function;\n  };\n\n  /**\n   * A (read-only) array of all the initialized Apps.\n   */\n  apps: FirebaseApp[];\n\n  // Inherit the type information of our exported Promise implementation from\n  // es6-promises.\n  Promise: typeof Promise;\n\n  // The current SDK version ('${JSCORE_VERSION}').\n  SDK_VERSION: string;\n\n  // TODO: Migrate to firebase-app-internal.d.ts\n  INTERNAL: {\n    /**\n     * Internal API to register a Firebase Service into the firebase namespace.\n     *\n     * Each service will create a child namespace (firease.name) which acts as\n     * both a namespace for service specific properties, and also as a service\n     * accessor function (firebase.name() or firebase.name(app)).\n     *\n     * @param name The Firebase Service being registered.\n     * @param createService Factory function to create a service instance.\n     * @param serviceProperties Properties to copy to the service's namespace.\n     * @param appHook All appHooks called before intializeApp returns to caller.\n     * @param allowMultipleInstances Whether the registered service supports\n     *   multiple instances per app. If not specified, the default is false.\n     */\n    registerService(\n      name: string,\n      createService: FirebaseServiceFactory,\n      serviceProperties?: { [prop: string]: any },\n      appHook?: AppHook,\n      allowMultipleInstances?: boolean\n    ): FirebaseServiceNamespace<FirebaseService>;\n\n    /**\n     * Just used for testing to start from a fresh namespace.\n     */\n    createFirebaseNamespace(): FirebaseNamespace;\n\n    /**\n     * Internal API to install properties on the top-level firebase namespace.\n     * @prop props The top level properties of this object are copied to the\n     *   namespace.\n     */\n    extendNamespace(props: { [prop: string]: any }): void;\n\n    /**\n     * Create a Subscribe function.  A proxy Observer is created so that\n     * events can be sent to single Observer to be fanned out automatically.\n     */\n    createSubscribe<T>(\n      executor: (observer: Observer<T>) => void,\n      onNoObservers?: (observer: Observer<T>) => void\n    ): Subscribe<T>;\n\n    /**\n     * Utility exposed for internal testing.\n     */\n    deepExtend(target: any, source: any): any;\n\n    /**\n     * Internal API to remove an app from the list of registered apps.\n     */\n    removeApp(name: string): void;\n\n    /**\n     * Service factories for each registered service.\n     */\n    factories: { [name: string]: FirebaseServiceFactory };\n\n    /*\n     * Convert service name to factory name to use.\n     */\n    useAsService(app: FirebaseApp, serviceName: string): string | null;\n\n    /**\n     * Use to construct all thrown FirebaseError's.\n     */\n    ErrorFactory: FirebaseErrorFactoryClass;\n  };\n}\n\nconst contains = function(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n// An array to capture listeners before the true auth functions\n// exist\nlet tokenListeners = [];\n\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n */\nclass FirebaseAppImpl implements FirebaseApp {\n  private options_: FirebaseOptions;\n  private name_: string;\n  private isDeleted_ = false;\n  private services_: {\n    [name: string]: {\n      [serviceName: string]: FirebaseService;\n    };\n  } = {};\n\n  public INTERNAL;\n\n  constructor(\n    options: FirebaseOptions,\n    name: string,\n    private firebase_: FirebaseNamespace\n  ) {\n    this.name_ = name;\n    this.options_ = deepCopy<FirebaseOptions>(options);\n    this.INTERNAL = {\n      getUid: () => null,\n      getToken: () => Promise.resolve(null),\n      addAuthTokenListener: (callback: (token: string | null) => void) => {\n        tokenListeners.push(callback);\n        // Make sure callback is called, asynchronously, in the absence of the auth module\n        setTimeout(() => callback(null), 0);\n      },\n      removeAuthTokenListener: callback => {\n        tokenListeners = tokenListeners.filter(\n          listener => listener !== callback\n        );\n      }\n    };\n  }\n\n  get name(): string {\n    this.checkDestroyed_();\n    return this.name_;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed_();\n    return this.options_;\n  }\n\n  delete(): Promise<void> {\n    return new Promise(resolve => {\n      this.checkDestroyed_();\n      resolve();\n    })\n      .then(() => {\n        this.firebase_.INTERNAL.removeApp(this.name_);\n        let services: FirebaseService[] = [];\n        Object.keys(this.services_).forEach(serviceKey => {\n          Object.keys(this.services_[serviceKey]).forEach(instanceKey => {\n            services.push(this.services_[serviceKey][instanceKey]);\n          });\n        });\n        return Promise.all(\n          services.map(service => {\n            return service.INTERNAL!.delete();\n          })\n        );\n      })\n      .then((): void => {\n        this.isDeleted_ = true;\n        this.services_ = {};\n      });\n  }\n\n  /**\n   * Return a service instance associated with this app (creating it\n   * on demand), identified by the passed instanceIdentifier.\n   *\n   * NOTE: Currently storage is the only one that is leveraging this\n   * functionality. They invoke it by calling:\n   *\n   * ```javascript\n   * firebase.app().storage('STORAGE BUCKET ID')\n   * ```\n   *\n   * The service name is passed to this already\n   * @internal\n   */\n  _getService(\n    name: string,\n    instanceIdentifier: string = DEFAULT_ENTRY_NAME\n  ): FirebaseService {\n    this.checkDestroyed_();\n\n    if (!this.services_[name]) {\n      this.services_[name] = {};\n    }\n\n    if (!this.services_[name][instanceIdentifier]) {\n      /**\n       * If a custom instance has been defined (i.e. not '[DEFAULT]')\n       * then we will pass that instance on, otherwise we pass `null`\n       */\n      const instanceSpecifier =\n        instanceIdentifier !== DEFAULT_ENTRY_NAME\n          ? instanceIdentifier\n          : undefined;\n      const service = this.firebase_.INTERNAL.factories[name](\n        this,\n        this.extendApp.bind(this),\n        instanceSpecifier\n      );\n      this.services_[name][instanceIdentifier] = service;\n    }\n\n    return this.services_[name][instanceIdentifier];\n  }\n\n  /**\n   * Callback function used to extend an App instance at the time\n   * of service instance creation.\n   */\n  private extendApp(props: { [name: string]: any }): void {\n    // Copy the object onto the FirebaseAppImpl prototype\n    deepExtend(this, props);\n\n    /**\n     * If the app has overwritten the addAuthTokenListener stub, forward\n     * the active token listeners on to the true fxn.\n     *\n     * TODO: This function is required due to our current module\n     * structure. Once we are able to rely strictly upon a single module\n     * implementation, this code should be refactored and Auth should\n     * provide these stubs and the upgrade logic\n     */\n    if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\n      tokenListeners.forEach(listener => {\n        this.INTERNAL.addAuthTokenListener(listener);\n      });\n      tokenListeners = [];\n    }\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed_(): void {\n    if (this.isDeleted_) {\n      error('app-deleted', { name: this.name_ });\n    }\n  }\n}\n\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\n  FirebaseAppImpl.prototype.delete ||\n  console.log('dc');\n\n/**\n * Return a firebase namespace object.\n *\n * In production, this will be called exactly once and the result\n * assigned to the 'firebase' global.  It may be called multiple times\n * in unit tests.\n */\nexport function createFirebaseNamespace(): FirebaseNamespace {\n  let apps_: { [name: string]: FirebaseApp } = {};\n  let factories: { [service: string]: FirebaseServiceFactory } = {};\n  let appHooks: { [service: string]: AppHook } = {};\n\n  // A namespace is a plain JavaScript Object.\n  let namespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    __esModule: true,\n    initializeApp: initializeApp,\n    app: app as any,\n    apps: null as any,\n    Promise: Promise,\n    SDK_VERSION: '${JSCORE_VERSION}',\n    INTERNAL: {\n      registerService: registerService,\n      createFirebaseNamespace: createFirebaseNamespace,\n      extendNamespace: extendNamespace,\n      createSubscribe: createSubscribe,\n      ErrorFactory: ErrorFactory,\n      removeApp: removeApp,\n      factories: factories,\n      useAsService: useAsService,\n      Promise: Promise,\n      deepExtend: deepExtend\n    }\n  };\n\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  patchProperty(namespace, 'default', namespace);\n\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name: string): void {\n    let app = apps_[name];\n    callAppHooks(app, 'delete');\n    delete apps_[name];\n  }\n\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name?: string): FirebaseApp {\n    name = name || DEFAULT_ENTRY_NAME;\n    if (!contains(apps_, name)) {\n      error('no-app', { name: name });\n    }\n    return apps_[name];\n  }\n\n  patchProperty(app, 'App', FirebaseAppImpl);\n\n  /**\n   * Create a new App instance (name must be unique).\n   */\n  function initializeApp(options: FirebaseOptions, name?: string): FirebaseApp {\n    if (name === undefined) {\n      name = DEFAULT_ENTRY_NAME;\n    } else {\n      if (typeof name !== 'string' || name === '') {\n        error('bad-app-name', { name: name + '' });\n      }\n    }\n    if (contains(apps_, name)) {\n      error('duplicate-app', { name: name });\n    }\n\n    let app = new FirebaseAppImpl(\n      options,\n      name!,\n      namespace as FirebaseNamespace\n    );\n\n    apps_[name!] = app;\n    callAppHooks(app, 'create');\n\n    return app;\n  }\n\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps(): FirebaseApp[] {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps_).map(name => apps_[name]);\n  }\n\n  /*\n   * Register a Firebase Service.\n   *\n   * firebase.INTERNAL.registerService()\n   *\n   * TODO: Implement serviceProperties.\n   */\n  function registerService(\n    name: string,\n    createService: FirebaseServiceFactory,\n    serviceProperties?: { [prop: string]: any },\n    appHook?: AppHook,\n    allowMultipleInstances?: boolean\n  ): FirebaseServiceNamespace<FirebaseService> {\n    // Cannot re-register a service that already exists\n    if (factories[name]) {\n      error('duplicate-service', { name: name });\n    }\n\n    // Capture the service factory for later service instantiation\n    factories[name] = createService;\n\n    // Capture the appHook, if passed\n    if (appHook) {\n      appHooks[name] = appHook;\n\n      // Run the **new** app hook on all existing apps\n      getApps().forEach(app => {\n        appHook('create', app);\n      });\n    }\n\n    // The Service namespace is an accessor function ...\n    const serviceNamespace = (appArg: FirebaseApp = app()) => {\n      if (typeof (appArg as any)[name] !== 'function') {\n        // Invalid argument.\n        // This happens in the following case: firebase.storage('gs:/')\n        error('invalid-app-argument', { name: name });\n      }\n\n      // Forward service instance lookup to the FirebaseApp.\n      return (appArg as any)[name]();\n    };\n\n    // ... and a container for service-level properties.\n    if (serviceProperties !== undefined) {\n      deepExtend(serviceNamespace, serviceProperties);\n    }\n\n    // Monkey-patch the serviceNamespace onto the firebase namespace\n    (namespace as any)[name] = serviceNamespace;\n\n    // Patch the FirebaseAppImpl prototype\n    FirebaseAppImpl.prototype[name] = function(...args) {\n      const serviceFxn = this._getService.bind(this, name);\n      return serviceFxn.apply(this, allowMultipleInstances ? args : []);\n    };\n\n    return serviceNamespace;\n  }\n\n  /**\n   * Patch the top-level firebase namespace with additional properties.\n   *\n   * firebase.INTERNAL.extendNamespace()\n   */\n  function extendNamespace(props: { [prop: string]: any }): void {\n    deepExtend(namespace, props);\n  }\n\n  function callAppHooks(app: FirebaseApp, eventName: string) {\n    Object.keys(factories).forEach(serviceName => {\n      // Ignore virtual services\n      let factoryName = useAsService(app, serviceName);\n      if (factoryName === null) {\n        return;\n      }\n\n      if (appHooks[factoryName]) {\n        appHooks[factoryName](eventName, app);\n      }\n    });\n  }\n\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app: FirebaseApp, name: string): string | null {\n    if (name === 'serverAuth') {\n      return null;\n    }\n\n    let useService = name;\n    let options = app.options;\n\n    return useService;\n  }\n\n  return (namespace as any) as FirebaseNamespace;\n}\n\ntype AppError =\n  | 'no-app'\n  | 'bad-app-name'\n  | 'duplicate-app'\n  | 'app-deleted'\n  | 'duplicate-service'\n  | 'sa-not-supported'\n  | 'invalid-app-argument';\n\nfunction error(code: AppError, args?: { [name: string]: any }) {\n  throw appErrors.create(code, args);\n}\n\n// TypeScript does not support non-string indexes!\n// let errors: {[code: AppError: string} = {\nlet errors: { [code: string]: string } = {\n  'no-app':\n    \"No Firebase App '{$name}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  'bad-app-name': \"Illegal App name: '{$name}\",\n  'duplicate-app': \"Firebase App named '{$name}' already exists\",\n  'app-deleted': \"Firebase App named '{$name}' already deleted\",\n  'duplicate-service': \"Firebase service named '{$name}' already registered\",\n  'sa-not-supported':\n    'Initializing the Firebase SDK with a service ' +\n    'account is only allowed in a Node.js environment. On client ' +\n    'devices, you should instead initialize the SDK with an api key and ' +\n    'auth domain',\n  'invalid-app-argument':\n    'firebase.{$name}() takes either no argument or a ' +\n    'Firebase App instance.'\n};\n\nlet appErrors = new ErrorFactory<AppError>('app', 'Firebase', errors);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}